什么是Devops?
	软件开发经历那个流程
	制定计划、需求分析、软件设计、程序编写、软件测试和运行维护
	
	开发模式
	瀑布流方式
	瀑布模型核心思想是按工序将问题化简，将功能的实现与设计分开，便于分工协作，即采用结构化的分析与设计方法将逻辑实现与物理实现分开。将软件生命周期划分为制定计划、需求分析、软件设计、程序编写、软件测试和运行维护等六个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。
	配图
		
	敏捷开发方式
	敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。
	配图
		
	背景
	　　软件开发最高效的组织形式是“One Man Work”，只有一个人干活，写个小项目，从需求到开发，从测试到部署全部独立完成，非常高效。但是随着业务的增长，项目开始变得庞大，变成团队，出现了分工，出现了产品经理，项目经理，开发，数据，测试，运维等角色。这些角色之间存在天然的矛盾。对于运维来说，稳定压倒一切。而对于研发来说，却希望能开发更多的功能。

	Devops概念
	wiki定义：DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
缩短软件开发生命周期并使用 持续交付 提供高质量的软件。
	配图	
	Devops来源
	DevOps 运动始于 2007 年左右，当时软件开发和 IT 运营社区开始担忧传统的软件开发模式。在此模式下，编写代码的开发人员与部署和支持代码的运营人员会独立工作。DevOps 这一术语由“开发”和“运营”两个词构成，它反映了将这些领域整合为一个持续流程的过程。
	配图

　　DevOps的理念希望能打破这种屏障，让研发（Development）和运维（Operations）一体化。即通过工具辅助开发完成运维的部分工作，减少成本。


为什么使用Devops?
	Devops的优点
	在DevOps之前，开发和运营团队完全孤立。
	测试和部署是在设计构建之后完成的独立活动。因此，他们比实际构建周期消耗更多时间。
	在不使用DevOps的情况下，团队成员将大量时间花在测试，部署和设计上，而不是构建项目。
	手动代码部署会导致生产中出现人为错误
	编码和运营团队有各自的时间表，不同步导致进一步的延误
	Devops的适用范围
	适用团队：对外包和分散敏感度较低的10-20人团队最优。规模过大的团队内部结构复杂，工作流结构不清晰，如果以整体为单位构建DevOps框架会大大增加系统的复杂性，反而有违DevOps的初衷。规模过小的团队分工和结构简单，引入DevOps需要考虑成本效益问题。此外，DevOps对含有外包人员/业务的企业也并非不能适用,它仍然有助于软件开发和运维工作的顺利进行,并且成为沟通内部团队和外包团队、提高工作效率的重要工具。
	自动化

Devops工具?
	技术栈及工具链
产品&质量管理
禅道
Jira

代码仓库管理
Git
Gitlab
Github

自动化构建脚本
Gradle
Maven

持续集成（CI）&持续部署（CD）
Jenkins
Travis CI
Github Actions
Gitlab gitlab-runner 
Gitee Go


虚拟机与容器化
Docker
Kvm

容器管理
K8S

自动化测试
Appium

例子
odoo使用Devops的工具链
test qt例子自动编译打包

要点巩固			


